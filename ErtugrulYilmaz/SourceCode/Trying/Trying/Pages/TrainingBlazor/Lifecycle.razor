@page "/lifecycle"
@using System.Threading;

<h1>OnInit & OnInitAsync Demo</h1>

<br />
<button class="btn btn-primary" @onclick="IncrementCount">Click Me</button>
<br />
Count : @Count
<br />
<button class="btn btn-warning" @onclick="StartCountDown">Click Me</button>
<br />

@foreach (var item in EventType)
{
    @item
    <hr />
}

<LifecycleChildComponent CurrentCount="@currentCount" />
@code {
    private int currentCount = 0;

    List<string> EventType = new();

    private void IncrementCount()
    {
        currentCount++;
    }

    public int Count { get; set; } = 5;

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
        await Task.Delay(1000);
    }
    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }
    protected async override Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
        await Task.Delay(1000);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("OnAfterRender is called");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
        await Task.Delay(1000);
    }
    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }
    public void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }

    public void StartCountDown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }
}
